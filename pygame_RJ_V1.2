# Current Challenge:
#   Add Betting to the Game


import pygame
import random

pygame.init()

# Create Window
screen_width = 700
screen_height = 700
screen = pygame.display.set_mode(size=(screen_width,screen_height))
pygame.display.set_caption("RJ PygameV1")
screen.fill((40,130,80))
    #Create Font for Text on Screen
font = pygame.font.Font('freesansbold.ttf', 16)


class Card:
    def __init__(self, suit, number):
        self.suit = suit
        self.number = number

    def showDealerFirstCard(self):
        # First card face up
        dealerOne_box = pygame.draw.rect(screen, (60,60,60), (75, 80, 100, 150))
        dealerOne_text = font.render(str(f"{self.number} of {self.suit}"), True, (0,0,0))
        screen.blit(dealerOne_text, dealerOne_box)

        dealerTwo_box = pygame.draw.rect(screen, (60,60,60), (180, 80, 100, 150))
        dealerTwo_text = font.render(("Back of Card"), True, (0,0,0))
        screen.blit(dealerTwo_text, dealerTwo_box)

    def showDealerSecondCard(self):
        print(str(f"{self.number} of {self.suit}"))
        dealerCardTwo_box = pygame.draw.rect(screen, (60, 60, 60), (180, 80, 100, 150))
        dealerCardTwo_text = font.render(str(f"{self.number} of {self.suit}"), True, (0,0,0))
        screen.blit(dealerCardTwo_text, dealerCardTwo_box)

    def showDealerThirdCard(self):
        print(str(f"{self.number} of {self.suit}"))
        dealerCardThree_box = pygame.draw.rect(screen, (60, 60, 60), (285, 80, 100, 150))
        dealerCardThree_text = font.render(str(f"{self.number} of {self.suit}"), True, (0,0,0))
        screen.blit(dealerCardThree_text, dealerCardThree_box)

    def showDealerFourthCard(self):
        print(str(f"{self.number} of {self.suit}"))
        dealerCardFour_box = pygame.draw.rect(screen, (60, 60, 60), (390, 80, 100, 150))
        dealerCardFour_text = font.render(str(f"{self.number} of {self.suit}"), True, (0,0,0))
        screen.blit(dealerCardFour_text, dealerCardFour_box)
    
    def showDealerFifthCard(self):
        print(str(f"{self.number} of {self.suit}"))
        dealerCardFive_box = pygame.draw.rect(screen, (60, 60, 60), (495, 80, 100, 150))
        dealerCardFive_text = font.render(str(f"{self.number} of {self.suit}"), True, (0,0,0))
        screen.blit(dealerCardFive_text, dealerCardFive_box)

# Prints First Card to Screen
    def showTextOne(self):
        #print(str(f"{self.number} of {self.suit}"))
        cardOne_box = pygame.draw.rect(screen, (60, 60, 60), (75, 250, 100, 150))
        cardOne_text = font.render(str(f"{self.number} of {self.suit}"), True, (0,0,0))
        screen.blit(cardOne_text, cardOne_box)
# Prints Second Card to Screen 
    def showTextTwo(self):
        # Prints second card to screen
        print(str(f"{self.number} of {self.suit}"))
        cardTwo_box = pygame.draw.rect(screen, (60, 60, 60), (180, 250, 100, 150))
        cardTwo_text = font.render(str(f"{self.number} of {self.suit}"), True, (0,0,0))
        screen.blit(cardTwo_text, cardTwo_box)        
# Prints Third Card to Screen
    def showTextThree(self):
        print(str(f"{self.number} of {self.suit}"))
        cardThree_box = pygame.draw.rect(screen, (60, 60, 60), (285, 250, 100, 150))
        cardThree_text = font.render(str(f"{self.number} of {self.suit}"), True, (0,0,0))
        screen.blit(cardThree_text, cardThree_box)
# Prints Fourth Card to Screen
    def showTextFour(self):
        print(str(f"{self.number} of {self.suit}"))
        cardFour_box = pygame.draw.rect(screen, (60, 60, 60), (390, 250, 100, 150))
        cardFour_text = font.render(str(f"{self.number} of {self.suit}"), True, (0,0,0))
        screen.blit(cardFour_text, cardFour_box)
# Prints Fifth Card to Screen
    def showTextFive(self):
        print(str(f"{self.number} of {self.suit}"))
        cardFive_box = pygame.draw.rect(screen, (60, 60, 60), (495, 250, 100, 150))
        cardFive_text = font.render(str(f"{self.number} of {self.suit}"), True, (0,0,0))
        screen.blit(cardFive_text, cardFive_box)
    
    
class Deck:
    def __init__(self):
        self.cards = []
        self.build()

    def build(self):
        for suit in ["A", "B", "C", "D"]:
            for numb in [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]:
                self.cards.append(Card(suit, numb))
        deck = random.shuffle(self.cards)
    
    def show(self):
        for card in self.cards:
            card.showText()

    def drawCard(self):
        return self.cards.pop()

deck = Deck()
#deck.show()

class JAK:
    def __init__(self, hand, total, bet):
        self.hand = []
        self.total = 0
        self.bet = 0 

    def dealInitialHand(self, deck):
        cardOne = self.hand.append(deck.drawCard())
        for card in self.hand:
            card.showTextOne()

    def secondCard(self, deck):
        cardTwo = self.hand.append(deck.drawCard())
        for card in self.hand:
            card.showTextTwo()

    def thirdCard(self, deck):
        cardThree = self.hand.append(deck.drawCard())
        for card in self.hand:
            card.showTextThree()

    def fourthCard(self, deck):
        cardFour = self.hand.append(deck.drawCard())
        for card in self.hand:
            card.showTextFour()
    
    def fifthCard(self, deck):
        cardFive = self.hand.append(deck.drawCard())
        for card in self.hand:
            card.showTextFive()

    
    def jak_total(self):
        # Calculates and Shows Player Total
        self.total = 0
        for card in self.hand:
            self.total += card.number
        if self.total <= 21:
            playerOneTotalBox = pygame.draw.rect(screen, (250,250,250), (150, 425, 300,25))
            playerOneTotalText = font.render(f"Player One Total: {self.total}", True, (0,0,0))
            screen.blit(playerOneTotalText, playerOneTotalBox)
            #print(self.total)
        else:
            playerOneTotalBox = pygame.draw.rect(screen, (250,250,250), (150, 425, 300,25))
            playerOneTotalText = font.render(f"Player One Total: BUSTED", True, (0,0,0))
            screen.blit(playerOneTotalText, playerOneTotalBox)

    def place_bet(self):
        self.bet = 0
        # Need to have it ask on the screen for bet 1-6
        # Draw box on screen and just have it ask 1-6, then have keydowns that deal with the bet
        placeBetBox = pygame.draw.rect(screen, (250,250,250), (300, 300, 200, 25))
        placeBetText = font.render("Place your bet: 1-6", True, (0,0,0))
        screen.blit(placeBetText, placeBetBox)

# Instances of JAK Class
player_one = JAK([], 0, 0)


class Dealer:
    def __init__(self, hand, total):
        self.hand = []
        self.total = 0

    def DealerInitalCard(self, deck):
        dealerCardOne = self.hand.append(deck.drawCard())
        for card in self.hand:
            card.showDealerFirstCard()

    def showSecondCard(self, deck):
        dealerCardTwo = self.hand.append(deck.drawCard())
        for card in self.hand:
            card.showDealerSecondCard()
    
    def showThirdCard(self, deck):
        dealerCardThree = self.hand.append(deck.drawCard())
        for card in self.hand:
            card.showDealerThirdCard()
    
    def showFourthCard(self, deck):
        dealerCardFour = self.hand.append(deck.drawCard())
        for card in self.hand:
            card.showDealerFourthCard()
    
    def showFifthCard(self, deck):
        dealerCardFive = self.hand.append(deck.drawCard())
        for card in self.hand:
            card.showDealerFifthCard()

    def dealer_total(self):
        # Draw Dealer Score Box
        self.total = 0
        for card in self.hand:
            self.total += card.number
        if self.total <= 21:  
            dealer_score_label = pygame.draw.rect(screen, (250,250,250), (200, 20, 200,25))
            dealer_score_box = font.render(f"Dealer Score: {self.total}", True, (0,0,0))
            screen.blit(dealer_score_box, dealer_score_label)
        else:
            dealer_score_label = pygame.draw.rect(screen, (250,250,250), (200, 20, 200,25))
            dealer_score_box = font.render(f"Dealer Score: BUSTED", True, (0,0,0))
            screen.blit(dealer_score_box, dealer_score_label)

boss_one = Dealer([], 0)


ROUND = 1
# Draw Inital Dealer Text and Rules on Screen
def draw():
    # Draw Round Tracker:
    round_box = pygame.draw.rect(screen, (250,250,250), (175, 625, 100, 25))
    round_text = font.render(f"Round: {ROUND}", True, (0,0,0))
    screen.blit(round_text, round_box)
    # Draw Rules Box
    rule_guide = pygame.draw.rect(screen, (250,250,250), (150, 675, 400, 25))
    rule_text = font.render("Press d to deal | Press h to hit | Press s to stay", True, (0,0,0))
    screen.blit(rule_text, rule_guide)


HIT_COUNTER = 0

# Main Game Loop
run = True
while run == True:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        # If player busts que them to start new round
        if player_one.total > 21:
            winner_score_label = pygame.draw.rect(screen, (250,250,250), (100, 475, 550, 40))
            winner_score_box = font.render(f"Player has busted. Press c to start new round", True, (0,0,0))
            screen.blit(winner_score_box, winner_score_label)
        
          # Deals out initial cards to dealer and player  
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_d:
                #Show Players first two cards and total 
                player_one.dealInitialHand(deck)
                player_one.secondCard(deck)
                player_one.jak_total()
                player_one.place_bet()
                # Show Dealer first card:
                boss_one.DealerInitalCard(deck)
                boss_one.dealer_total()
            # Player betting 1-6
            if event.key == pygame.K_1:
                player_one.bet = 1
                placeBetBox = pygame.draw.rect(screen, (40,180,30), (300, 300, 200, 25))
                placeBetText = font.render(f"Current Bet: {player_one.bet}", True, (0,0,0))
                screen.blit(placeBetText, placeBetBox)

            # Player Hitting
            if event.key == pygame.K_h:
                if HIT_COUNTER == 0:
                    player_one.thirdCard(deck)
                    player_one.jak_total()
                    HIT_COUNTER += 1
                elif HIT_COUNTER == 1:
                    player_one.fourthCard(deck)
                    player_one.jak_total()
                    HIT_COUNTER += 1
                elif HIT_COUNTER == 2:
                    player_one.fifthCard(deck)
                    player_one.jak_total()
                    HIT_COUNTER += 1
                else:
                    pass

            # If the player stays OR if the player has hit for 5 cards
            # Deal cards until the dealer reaches at least 15
            # As long as they player has not busted
            if player_one.total <= 21:
                if event.key == pygame.K_s or HIT_COUNTER == 3:

                    if boss_one.total <= 15:
                        boss_one.showSecondCard(deck)
                        boss_one.dealer_total()
                
                    if boss_one.total <= 15:
                        boss_one.showThirdCard(deck)
                        boss_one.dealer_total()
                    
                    if boss_one.total <= 15:
                        boss_one.showFourthCard(deck)
                        boss_one.dealer_total()
                    
                    if boss_one.total <= 15:
                        boss_one.showFifthCard(deck)
                        boss_one.dealer_total()
                    
                    # If boss busts:
                    if boss_one.total > 21:
                        winner_score_label = pygame.draw.rect(screen, (250,250,250), (100, 475, 550, 60))
                        winner_score_box = font.render(f"The Dealer has Busted. Player Wins. Press c for next round", True, (0,0,0))
                        screen.blit(winner_score_box, winner_score_label)
            
                    if boss_one.total >= player_one.total and boss_one.total <= 21:
                        winner_score_label = pygame.draw.rect(screen, (250,250,250), (100, 475, 550, 60))
                        winner_score_box = font.render(f"Dealer Score: {boss_one.total}, Player Score: {player_one.total}. Dealer wins. Press c for Next Round", True, (0,0,0))
                        screen.blit(winner_score_box, winner_score_label)

                    if player_one.total > boss_one.total and player_one.total <= 21:
                        winner_score_label = pygame.draw.rect(screen, (250,250,250), (100, 475, 550, 60))
                        winner_score_box = font.render(f"Dealer Score: {boss_one.total}, Player Score: {player_one.total}. Player wins. Press c for Next Round", True, (0,0,0))
                        screen.blit(winner_score_box, winner_score_label)
                

        # Starts new round 
            if event.key == pygame.K_c:
                screen.fill((40,130,80))
                if ROUND != 6:
                    ROUND += 1
                
                player_one.total = 0
                player_one.hand = []
                boss_one.total = 0
                boss_one.hand = []
                HIT_COUNTER = 0
                deck = Deck()

            

    draw()
    

    
    pygame.display.update()

pygame.quit()
